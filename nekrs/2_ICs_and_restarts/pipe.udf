//
// nekRS User Defined File
//
#include "udf.hpp"

// Define variables to store values pulled from [CASEDATA] in .par file
static double R_PIPE;
static double U_INIT;
static double U_INFLOW;
static double C_X0;
static double C_Y0;

#ifdef __okl__

#include "pipe.oudf"

#endif

double velocity_profile(double u, double x0, double y0, double x, double y, double rPipe)
{
  // calculate parabolic velocity profile
  return -(u)*(1 - (( ((x-x0)*(x-x0))+((y-y0)*(y-y0)) )/(rPipe*rPipe)));
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  // Extract custom parameters specified in .par file
  platform->par->extract("casedata", "r_pipe", R_PIPE);
  platform->par->extract("casedata", "u_init", U_INIT);
  platform->par->extract("casedata", "u_inflow", U_INFLOW);
  platform->par->extract("casedata", "c_x0", C_X0);
  platform->par->extract("casedata", "c_y0", C_Y0);
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  // Send parameters specified in .par file to .oudf file (device kernels)
  kernelInfo.define("rPipe") = R_PIPE;
  kernelInfo.define("uInflow") = U_INFLOW;
  kernelInfo.define("cx0") = C_X0;
  kernelInfo.define("cy0") = C_Y0;
}

void UDF_Setup()
{
  // Set initial conditions unless a restart file is being used
  if (platform->options.getArgs("RESTART FILE NAME").empty()){

    // get mesh data
    auto mesh = nrs->meshV;
    auto [x, y, z] = mesh->xyzHost(); // x[n], y[n], z[n]

    // define vectors for setting intermediate U and P
    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    std::vector<dfloat> P(nrs->fieldOffset, 0.0);

    // loop over all the GLL points and assign values to the solution arrays
    for (int n = 0; n < mesh->Nlocal; n++) {
      // calculate parabolic velocity profile using custom function
      double u_z = velocity_profile(U_INIT, C_X0, C_Y0, x[n], y[n], R_PIPE);
      
      // set initial velocity and pressure
      U[n + 0 * nrs->fieldOffset] = 0.0;
      U[n + 1 * nrs->fieldOffset] = 0.0;
      U[n + 2 * nrs->fieldOffset] = u_z;
      P[n] = 0.0;
    }

    // copy intermediate U and P to velocity and pressure on device
    nrs->fluid->o_U.copyFrom(U.data(), U.size());
    nrs->fluid->o_P.copyFrom(P.data(), P.size());
  }
}

void UDF_ExecuteStep(double time, int tstep)
{
}