//
// nekRS User Defined File
//
#include "udf.hpp"

// Define variables to store values pulled from [CASEDATA] in .par file
static dfloat R_PIPE;
static dfloat U_INIT;
static dfloat U_INFLOW;
static dfloat T_INFLOW;
static dfloat T_HEATER;
static dfloat T_INIT;
static dfloat C_X0;
static dfloat C_Y0;

#ifdef __okl__

#include "pipe.oudf"

#endif

dfloat velocity_profile(dfloat u, dfloat x0, dfloat y0, dfloat x, dfloat y, dfloat rPipe)
{
  // calculate parabolic velocity profile
  return -(u)*(1 - (( ((x-x0)*(x-x0))+((y-y0)*(y-y0)) )/(rPipe*rPipe)));
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  // Send parameters specified in .par file to .oudf file (device kernels)
  kernelInfo["defines/rPipe"]		= R_PIPE;
  kernelInfo["defines/uInflow"]	= U_INFLOW;
  kernelInfo["defines/TInflow"]	= T_INFLOW;
  kernelInfo["defines/THeater"]	= T_HEATER;
  kernelInfo["defines/cx0"]			= C_X0;
  kernelInfo["defines/cy0"]			= C_Y0;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  // Extract custom parameters specified in .par file
  platform->par->extract("casedata", "r_pipe", R_PIPE);
  platform->par->extract("casedata", "u_init", U_INIT);
  platform->par->extract("casedata", "u_inflow", U_INFLOW);
  platform->par->extract("casedata", "T_inflow", T_INFLOW);
  platform->par->extract("casedata", "T_heater", T_HEATER);
  platform->par->extract("casedata", "T_init", T_INIT);
  platform->par->extract("casedata", "c_x0", C_X0);
  platform->par->extract("casedata", "c_y0", C_Y0);
}

void UDF_Setup(nrs_t* nrs)
{
  // Set initial conditions unless a restart file is being used
  if (platform->options.getArgs("RESTART FILE NAME").empty()){

    // set initial conditions for the velocity, temperature, and pressure
    mesh_t * mesh = nrs->meshV;

    // loop over all the GLL points and assign values to the solution arrays
    int n_gll_points = mesh->Np * mesh->Nelements;

    for (int n = 0; n < n_gll_points; ++n)
    {
      // calculate parabolic velocity profile using custom function
      
      dfloat u_z = velocity_profile(U_INIT, C_X0, C_Y0, mesh->x[n], mesh->y[n], R_PIPE);

      // set initial velocity
      nrs->U[n + 0 * nrs->fieldOffset] = 0.0;
      nrs->U[n + 1 * nrs->fieldOffset] = 0.0;
      nrs->U[n + 2 * nrs->fieldOffset] = u_z;

      // set initial pressure
      nrs->P[n] = 0.0;

      // set initial temperature
      nrs->cds->S[n] = T_INIT;
    }
  }
}
