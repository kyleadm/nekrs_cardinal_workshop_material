// -----------------------------------------------------------
// RANS k-tau kernel
// -----------------------------------------------------------

@kernel void scalarScaledAdd(const dlong N,
                             const dfloat a,
                             const dfloat b,
                             @ restrict const dfloat *X,
                             @ restrict dfloat *Y)
{
  for (dlong n = 0; n < N; ++n; @tile(256, @outer, @inner)) {
    if (n < N) {
      Y[n] = a + b * X[n];
    }
  }
}

// -----------------------------------------------------------
// Boundary conditions (BCs)
// -----------------------------------------------------------

void velocityDirichletConditions(bcData *bc)
{
  // calculate parabolic inlet velocity profile
  auto u_z = -(2*uInflow)*(1 - (( ((bc->x-cx0)*(bc->x-cx0))+((bc->y-cy0)*(bc->y-cy0)) )/(rPipe*rPipe)));

  bc->u = 0.0;		// set velocity x component at inlet
  bc->v = 0.0;		// set velocity y component at inlet
  bc->w = u_z;		// set velocity z component at inlet
}

void pressureDirichletConditions(bcData *bc)
{
  bc->p = 0.0;		// set pressure at outlet
}

void scalarDirichletConditions(bcData * bc)
{
  // Temperature BCs
  if (bc->scalarId == 0){

    // inlet BC
    if (bc->id == 1)
    {
      bc->s = TInflow;
    }

    // wall BC
    if (bc->id == 3)
    {
      if (bc->y >= 0.2 && bc->z <= 1.0 && bc->z >= 0.0)  // heated patch
      {
        bc->s = THeater;
      }
      else
      {
        bc->s = TInflow;
      }
    }
  }

  // RANS k inlet and wall BCs
  if (bc->scalarId == 1)
  {
    if (bc->id == 1)
    {
      bc->s = 1.0e-5;
    }
    else if (bc->id == 3)
    {
      bc->s = 0.0;
    }
  }

  // RANS tau inlet BC
  if (bc->scalarId == 2){
    if (bc->id == 1)
    {
      bc->s = 0.1;
    }
    else if (bc->id == 3)
    {
      bc->s = 0.0;
    }
  }
}